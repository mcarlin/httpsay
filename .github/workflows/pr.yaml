name: PR Check
on:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Read toolchain file
        id: rust-toolchain
        run: |
          RUST_TOOLCHAIN=$(grep 'channel' rust-toolchain.toml | awk '{split($0,a," = "); print a[2]}' | tr -d '"')
          echo "RUST_TOOLCHAIN=$RUST_TOOLCHAIN" >> $GITHUB_OUTPUT
        shell: bash
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.RUST_TOOLCHAIN }}
          components: 'clippy, rustfmt'
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
  build-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: Test and Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: lint

    steps:
      - uses: actions/checkout@v3
      - name: Read toolchain file
        id: rust-toolchain
        run: |
          RUST_TOOLCHAIN=$(grep 'channel' rust-toolchain.toml | awk '{split($0,a," = "); print a[2]}' | tr -d '"')
          echo "RUST_TOOLCHAIN=$RUST_TOOLCHAIN" >> $GITHUB_OUTPUT
        shell: bash
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.RUST_TOOLCHAIN }}
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Test
        run: cargo test --all-features --verbose
      - name: Build
        run: cargo build --all-features --verbose
